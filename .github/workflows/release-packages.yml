name: Create VibeStack Coolify Release Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for manual release'
        required: true
        default: 'v0.1.0'
  push:
    branches: [main, master]
    paths: ['.github/workflows/release-packages.yml']

jobs:
  package-vibestack-coolify:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate schema.yaml configuration
      run: |
        echo "🔍 Validating schema.yaml for required variables..."

        # Critical variables that MUST be present and have defaults
        CRITICAL_VARS=("deploy_coolify" "deploy_kasm" "coolify_ocpus" "coolify_memory_in_gbs" "coolify_block_volume_size_in_gbs")

        SCHEMA_FILE="deploy/coolify/schema.yaml"
        VALIDATION_FAILED=0

        for var in "${CRITICAL_VARS[@]}"; do
          echo "Checking variable: $var"

          # Check if variable exists in schema
          if ! grep -q "^\s*${var}:" "$SCHEMA_FILE"; then
            echo "  ❌ ERROR: Variable '$var' not found in schema.yaml"
            VALIDATION_FAILED=1
            continue
          fi

          # Extract the variable section (from variable name to next variable or end)
          VAR_SECTION=$(awk "/^\s*${var}:/,/^\s*[a-z_]+:/" "$SCHEMA_FILE" | head -n -1)

          # Check if it has a default value
          if ! echo "$VAR_SECTION" | grep -q "default:"; then
            echo "  ⚠️  WARNING: Variable '$var' has no default value"
          else
            DEFAULT_VALUE=$(echo "$VAR_SECTION" | grep "default:" | head -1 | sed 's/.*default:\s*//')
            echo "  ✓ Has default: $DEFAULT_VALUE"
          fi

          # Check if marked as required
          if echo "$VAR_SECTION" | grep -q "required: true"; then
            echo "  ✓ Marked as required"
          else
            echo "  ⚠️  WARNING: Variable '$var' not marked as 'required: true'"
          fi
        done

        # Check for validation constraints on OCPU/memory variables
        echo ""
        echo "🔍 Checking validation constraints..."

        for var in "coolify_ocpus" "coolify_memory_in_gbs"; do
          VAR_SECTION=$(awk "/^\s*${var}:/,/^\s*[a-z_]+:/" "$SCHEMA_FILE" | head -n -1)

          if echo "$VAR_SECTION" | grep -q "maximum:"; then
            MAX_VALUE=$(echo "$VAR_SECTION" | grep "maximum:" | sed 's/.*maximum:\s*//')
            echo "  ✓ $var has maximum: $MAX_VALUE"
          else
            echo "  ⚠️  WARNING: $var has no maximum constraint"
          fi
        done

        if [ $VALIDATION_FAILED -eq 1 ]; then
          echo ""
          echo "❌ Schema validation failed! Critical variables are missing."
          exit 1
        fi

        echo ""
        echo "✅ Schema validation passed!"

    - name: Set release tag
      id: release_tag
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Create VibeStack Coolify package
      run: |
        echo "📦 Creating VibeStack Coolify package..."
        # Create directory for Coolify deployment
        mkdir -p vibestack-coolify-package
        cp deploy/coolify/*.tf vibestack-coolify-package/
        cp deploy/coolify/schema.yaml vibestack-coolify-package/
        cp deploy/coolify/cloud-init-*.yaml vibestack-coolify-package/ 2>/dev/null || true

        # Copy scripts directory from root (required for capacity checking)
        mkdir -p vibestack-coolify-package/scripts
        cp scripts/*.sh vibestack-coolify-package/scripts/ 2>/dev/null || true

        # Create the zip file with vibestack- prefix for consistent naming
        cd vibestack-coolify-package
        zip -r ../vibestack-coolify.zip .
        cd ..

        echo "✅ Created vibestack-coolify.zip (will create 'vibestack-coolify' stack in Resource Manager)"
        ls -la vibestack-coolify.zip

    - name: Show created package
      run: |
        echo "📦 Created package:"
        ls -la vibestack-coolify.zip

        echo -e "\n📋 VibeStack Coolify contents:"
        unzip -l vibestack-coolify.zip

    - name: Upload package to release (if triggered by release)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.release.tag_name }}
        files: |
          vibestack-coolify.zip

    - name: Create manual release (if triggered manually)
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_tag.outputs.tag_name }}
        name: VibeStack Coolify ${{ steps.release_tag.outputs.tag_name }}
        body: |
          🚀 **VibeStack Coolify - Oracle Cloud Always Free Deployment**

          Deploy Coolify on Oracle Cloud Infrastructure using only Always Free tier resources.

          ## 📦 Deployment Package

          | Package | Resources | Use Case |
          |---------|-----------|----------|
          | **vibestack-coolify.zip** | Coolify server (2 OCPUs, 12GB RAM, 100GB storage) | Self-hosted application platform |

          ## 🚀 Deploy to Oracle Cloud

          [![Deploy to Oracle Cloud](https://oci-resourcemanager-plugin.plugins.oci.oraclecloud.com/latest/deploy-to-oracle-cloud.svg)](https://cloud.oracle.com/resourcemanager/stacks/create?zipUrl=https://github.com/${{ github.repository }}/releases/latest/download/vibestack-coolify.zip)

          ## 📋 Prerequisites
          1. Oracle Cloud Always Free account
          2. ED25519 SSH key pair
          3. Cloudflare account (free)
          4. Cloudflare Zero Trust account (for tunnels)
          5. Domain managed by Cloudflare
          6. Cloudflare origin certificate for your domain

          ## 🛠️ What's Included
          - Custom compartment (you name it during deployment)
          - Ubuntu 22.04 LTS (or Oracle Linux option)
          - Public networking with security groups
          - SSH access with your public key
          - Always Free tier compatible - no charges

          ## 🔮 Coming Soon
          - **VibeStack KASM**: Remote workspace server deployment
          - **VibeStack Full**: Combined KASM + Coolify deployment

          ## 📖 Documentation
          See the [repository README](https://github.com/${{ github.repository }}) for detailed setup instructions and documentation.
        files: |
          vibestack-coolify.zip
        draft: false
        prerelease: false

    - name: Verify package contents
      run: |
        echo "📦 Package Verification:"

        REQUIRED_FILES=(
          "providers.tf"
          "variables.tf"
          "outputs.tf"
          "schema.yaml"
          "compute.tf"
          "network.tf"
          "storage.tf"
          "locals.tf"
          "compartment.tf"
          "datasources.tf"
          "scripts/terraform-capacity-check.sh"
          "scripts/check-oci-capacity.sh"
          "scripts/monitor-and-deploy.sh"
        )

        echo -e "\n✅ Checking vibestack-coolify.zip:"
        for file in "${REQUIRED_FILES[@]}"; do
          if unzip -l "vibestack-coolify.zip" | grep -q "$file"; then
            echo "  ✓ $file"
          else
            echo "  ✗ $file (MISSING)"
          fi
        done

    - name: Summary
      run: |
        echo "🎉 Successfully created VibeStack Coolify deployment package!"
        echo ""
        echo "📦 Generated package:"
        echo "  • vibestack-coolify.zip - VibeStack Coolify deployment"
        echo ""
        echo "🚀 This package will create a Resource Manager stack named: vibestack-coolify"
        echo ""
        echo "📋 Package size:"
        ls -lh vibestack-coolify.zip