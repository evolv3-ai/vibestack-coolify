 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/deploy/coolify/cloud-init-coolify.yaml b/deploy/coolify/cloud-init-coolify.yaml
index 9ea573bf134f0425718c43d42e17792f2dec6cdd..76eedafad0dfded14e962228f2cb8ab3dc66d438 100644
--- a/deploy/coolify/cloud-init-coolify.yaml
+++ b/deploy/coolify/cloud-init-coolify.yaml
@@ -23,50 +23,101 @@ write_files:
   - content: |
       nameserver 1.1.1.1
       nameserver 1.0.0.1
       nameserver 8.8.8.8
       nameserver 8.8.4.4
     path: /etc/resolv.conf.vibestack
     permissions: '0644'
 
   # Environment file for Cloudflare configuration
   - content: |
 %{ for var in cloudflare_env_vars ~}
       ${var}
 %{ endfor ~}
     path: /opt/vibestack/.env
     permissions: '0644'
 
   # Coolify root user configuration
   - content: |
       COOLIFY_ROOT_USERNAME=${coolify_root_username}
       COOLIFY_ROOT_EMAIL=${coolify_root_email}
       COOLIFY_ROOT_PASSWORD=${coolify_root_password}
     path: /opt/vibestack/coolify-root-user.env
     permissions: '0600'
     owner: root:root
 
+  # Helper script that executes the Ansible playbook and blocks until completion
+  - content: |
+      #!/bin/bash
+      set -euo pipefail
+
+      LOG_FILE="/var/log/vibestack-setup.log"
+      ANSIBLE_LOG="/var/log/ansible-setup.log"
+
+      touch "$LOG_FILE" "$ANSIBLE_LOG"
+      chmod 0644 "$ANSIBLE_LOG"
+
+      {
+        echo "============================================="
+        echo "Starting Ansible playbook at $(date -u)"
+        echo "Log file: $ANSIBLE_LOG"
+        echo "============================================="
+      } | tee -a "$LOG_FILE"
+
+      export ANSIBLE_LOG_PATH="$ANSIBLE_LOG"
+      export ANSIBLE_VERBOSITY="${ANSIBLE_VERBOSITY:-2}"
+
+      cd /opt/vibestack
+
+      if command -v ansible-playbook >/dev/null 2>&1; then
+        ANSIBLE_CMD="$(command -v ansible-playbook)"
+      elif [ -x /home/ubuntu/.local/bin/ansible-playbook ]; then
+        ANSIBLE_CMD="/home/ubuntu/.local/bin/ansible-playbook"
+      elif [ -x /usr/local/bin/ansible-playbook ]; then
+        ANSIBLE_CMD="/usr/local/bin/ansible-playbook"
+      else
+        echo "ERROR: ansible-playbook not found!" | tee -a "$LOG_FILE"
+        exit 1
+      fi
+
+      echo "Using ansible command: $ANSIBLE_CMD" | tee -a "$LOG_FILE"
+
+      set +e
+      "$ANSIBLE_CMD" complete-setup.yml 2>&1 | tee -a "$LOG_FILE"
+      ANSIBLE_STATUS=${PIPESTATUS[0]}
+      set -e
+
+      if [ "$ANSIBLE_STATUS" -eq 0 ]; then
+        echo "Ansible playbook completed successfully at $(date -u)" | tee -a "$LOG_FILE"
+      else
+        echo "Ansible playbook failed with exit code $ANSIBLE_STATUS at $(date -u)" | tee -a "$LOG_FILE"
+        exit "$ANSIBLE_STATUS"
+      fi
+    path: /opt/vibestack/run-ansible.sh
+    permissions: '0755'
+    owner: root:root
+
 %{ if setup_custom_ssl ~}
   # SSL Certificate Files (base64 encoded for safe transmission)
   - content: "${ssl_cert_b64}"
     path: /opt/vibestack/ssl-cert.b64
     permissions: '0600'
     owner: root:root
 
   - content: "${ssl_key_b64}"
     path: /opt/vibestack/ssl-key.b64
     permissions: '0600'
     owner: root:root
 
 %{ if ssl_chain_b64 != "" ~}
   - content: "${ssl_chain_b64}"
     path: /opt/vibestack/ssl-chain.b64
     permissions: '0600'
     owner: root:root
 %{ endif ~}
 
   - content: |
       SSL_ENABLED=true
     path: /opt/vibestack/ssl-config.env
     permissions: '0644'
 %{ endif ~}
 
@@ -269,107 +320,59 @@ runcmd:
         echo "SSL_STAGING_KEY_PATH=$KEY_DEST"
         if [ -n "$CHAIN_DEST" ]; then
           echo "SSL_FULLCHAIN_PATH=$CHAIN_DEST"
           echo "SSL_STAGING_FULLCHAIN_PATH=$CHAIN_DEST"
         fi
       } > /opt/vibestack/ssl-config.env
       chmod 644 /opt/vibestack/ssl-config.env
 
       rm -f "$CERT_B64" "$KEY_B64" "$CHAIN_B64"
 
       echo "SSL certificate processing complete" >> /var/log/vibestack-setup.log
     else
       echo "SSL certificate files not found, skipping SSL setup" >> /var/log/vibestack-setup.log
     fi
 %{ endif ~}
 
 %{ if skip_ansible_execution ~}
   # ANSIBLE TESTING MODE - Skipping automatic execution
   - |
     echo "=============================================" >> /var/log/vibestack-setup.log
     echo "ANSIBLE TESTING MODE ENABLED" >> /var/log/vibestack-setup.log
     echo "=============================================" >> /var/log/vibestack-setup.log
     echo "Ansible has been installed but the playbook will NOT be executed automatically." >> /var/log/vibestack-setup.log
     echo "" >> /var/log/vibestack-setup.log
     echo "To run the Ansible playbook manually, SSH into the instance and run:" >> /var/log/vibestack-setup.log
-    echo "  cd /opt/vibestack" >> /var/log/vibestack-setup.log
-    echo "  ansible-playbook complete-setup.yml" >> /var/log/vibestack-setup.log
+    echo "  sudo /opt/vibestack/run-ansible.sh" >> /var/log/vibestack-setup.log
     echo "" >> /var/log/vibestack-setup.log
     echo "The playbook is located at: /opt/vibestack/complete-setup.yml" >> /var/log/vibestack-setup.log
     echo "=============================================" >> /var/log/vibestack-setup.log
 
   # Create a helper script for manual execution
   - |
-    cat > /opt/vibestack/run-setup.sh << 'EOF'
-    #!/bin/bash
-    # Helper script to run the Ansible setup manually
-
-    cd /opt/vibestack
-
-    echo "Starting Ansible playbook execution..."
-    export ANSIBLE_LOG_PATH=/var/log/ansible-setup.log
-    export ANSIBLE_VERBOSITY=2
-
-    # Find ansible-playbook command
-    if command -v ansible-playbook >/dev/null 2>&1; then
-      ANSIBLE_CMD="ansible-playbook"
-    elif [ -x /home/ubuntu/.local/bin/ansible-playbook ]; then
-      ANSIBLE_CMD="/home/ubuntu/.local/bin/ansible-playbook"
-    elif [ -x /usr/local/bin/ansible-playbook ]; then
-      ANSIBLE_CMD="/usr/local/bin/ansible-playbook"
-    else
-      echo "ERROR: ansible-playbook not found!"
-      exit 1
-    fi
-
-    echo "Using ansible command: $ANSIBLE_CMD"
-
-    if $ANSIBLE_CMD complete-setup.yml; then
-      echo "Ansible playbook completed successfully"
-    else
-      echo "Ansible playbook failed with exit code $?"
-      echo "Check /var/log/ansible-setup.log for details"
-    fi
-    EOF
-    chmod +x /opt/vibestack/run-setup.sh
+    ln -sf /opt/vibestack/run-ansible.sh /opt/vibestack/run-setup.sh
     chown ubuntu:ubuntu /opt/vibestack/run-setup.sh
 
 %{ else ~}
   # Final check: ensure no package management processes are running before Ansible
   - |
     echo "Final package management check before Ansible..." >> /var/log/vibestack-setup.log
     timeout 120 bash -c 'while sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do echo "Waiting for final dpkg lock clear..." >> /var/log/vibestack-setup.log; sleep 3; done'
     echo "All package locks cleared, starting Ansible..." >> /var/log/vibestack-setup.log
 
-  # Run the automation playbook with better error handling and verbose logging
+  # Run the automation playbook via systemd-run so cloud-init waits for completion
   - |
-    cd /opt/vibestack
-    export ANSIBLE_LOG_PATH=/var/log/ansible-setup.log
-    export ANSIBLE_VERBOSITY=2
-
-    # Try multiple ansible paths
-    if command -v ansible-playbook >/dev/null 2>&1; then
-      ANSIBLE_CMD="ansible-playbook"
-    elif [ -x /home/ubuntu/.local/bin/ansible-playbook ]; then
-      ANSIBLE_CMD="/home/ubuntu/.local/bin/ansible-playbook"
-    elif [ -x /usr/local/bin/ansible-playbook ]; then
-      ANSIBLE_CMD="/usr/local/bin/ansible-playbook"
-    else
-      echo "ERROR: ansible-playbook not found!" >> /var/log/vibestack-setup.log
-      exit 1
-    fi
-
-    echo "Using ansible command: $ANSIBLE_CMD" >> /var/log/vibestack-setup.log
-
-    if $ANSIBLE_CMD complete-setup.yml; then
-      echo "Ansible playbook completed successfully" >> /var/log/vibestack-setup.log
+    echo "Starting Ansible execution via systemd-run at $(date -u)" >> /var/log/vibestack-setup.log
+    if systemd-run --unit=vibestack-ansible --property=Type=oneshot --wait --collect /opt/vibestack/run-ansible.sh; then
+      echo "Ansible execution finished successfully (cloud-init waited for completion)" >> /var/log/vibestack-setup.log
     else
-      echo "Ansible playbook failed with exit code $?" >> /var/log/vibestack-setup.log
+      EXIT_CODE=$?
+      echo "Ansible execution finished with exit code $EXIT_CODE (cloud-init waited for completion)" >> /var/log/vibestack-setup.log
       echo "Check /var/log/ansible-setup.log for details" >> /var/log/vibestack-setup.log
       # Continue anyway - partial setup might be recoverable
     fi
 %{ endif ~}
 
   # Log completion
   - echo "VibeStack Coolify setup completed at $(date)" >> /var/log/vibestack-setup.log
 
 final_message: "VibeStack Coolify setup completed. Check /var/log/vibestack-setup.log for details."
 
EOF
)