 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/deploy/coolify/cloud-init-coolify.yaml b/deploy/coolify/cloud-init-coolify.yaml
index 9ea573bf134f0425718c43d42e17792f2dec6cdd..6b79ea887c4627e256e354415f4bcab371a8adbf 100644
--- a/deploy/coolify/cloud-init-coolify.yaml
+++ b/deploy/coolify/cloud-init-coolify.yaml
@@ -23,50 +23,141 @@ write_files:
   - content: |
       nameserver 1.1.1.1
       nameserver 1.0.0.1
       nameserver 8.8.8.8
       nameserver 8.8.4.4
     path: /etc/resolv.conf.vibestack
     permissions: '0644'
 
   # Environment file for Cloudflare configuration
   - content: |
 %{ for var in cloudflare_env_vars ~}
       ${var}
 %{ endfor ~}
     path: /opt/vibestack/.env
     permissions: '0644'
 
   # Coolify root user configuration
   - content: |
       COOLIFY_ROOT_USERNAME=${coolify_root_username}
       COOLIFY_ROOT_EMAIL=${coolify_root_email}
       COOLIFY_ROOT_PASSWORD=${coolify_root_password}
     path: /opt/vibestack/coolify-root-user.env
     permissions: '0600'
     owner: root:root
 
+  # Helper script to run Ansible and wait for completion
+  - content: |
+      #!/bin/bash
+      set -euo pipefail
+
+      LOG_FILE="/var/log/vibestack-setup.log"
+      ANSIBLE_LOG="/var/log/ansible-setup.log"
+
+      mkdir -p "$(dirname "$LOG_FILE")"
+      mkdir -p "$(dirname "$ANSIBLE_LOG")"
+      touch "$LOG_FILE"
+      if [ -f "$ANSIBLE_LOG" ]; then
+        cp "$ANSIBLE_LOG" "${ANSIBLE_LOG}.prev" 2>/dev/null || true
+      fi
+      : > "$ANSIBLE_LOG"
+      chmod 0644 "$ANSIBLE_LOG"
+
+      if [ $# -eq 0 ]; then
+        echo "ERROR: No playbook provided to run-ansible-playbook.sh" >> "$LOG_FILE"
+        exit 1
+      fi
+
+      PLAYBOOK="$1"
+      shift
+
+      echo "Starting Ansible playbook $PLAYBOOK at $(date)" >> "$LOG_FILE"
+
+      export ANSIBLE_LOG_PATH="$ANSIBLE_LOG"
+      export ANSIBLE_VERBOSITY="${ANSIBLE_VERBOSITY:-2}"
+
+      if command -v pgrep >/dev/null 2>&1; then
+        CHECK_PROCESS=1
+      else
+        echo "pgrep command not found; skipping Ansible process monitoring." >> "$LOG_FILE"
+        CHECK_PROCESS=0
+      fi
+
+      if command -v ansible-playbook >/dev/null 2>&1; then
+        ANSIBLE_CMD="$(command -v ansible-playbook)"
+      elif [ -x /home/ubuntu/.local/bin/ansible-playbook ]; then
+        ANSIBLE_CMD="/home/ubuntu/.local/bin/ansible-playbook"
+      elif [ -x /usr/local/bin/ansible-playbook ]; then
+        ANSIBLE_CMD="/usr/local/bin/ansible-playbook"
+      else
+        echo "ERROR: ansible-playbook not found!" >> "$LOG_FILE"
+        exit 1
+      fi
+
+      echo "Using ansible command: $ANSIBLE_CMD" >> "$LOG_FILE"
+
+      cd /opt/vibestack
+
+      "$ANSIBLE_CMD" "$PLAYBOOK" "$@"
+      EXIT_CODE=$?
+
+      if [ $EXIT_CODE -ne 0 ]; then
+        echo "Ansible playbook failed with exit code $EXIT_CODE" >> "$LOG_FILE"
+        exit $EXIT_CODE
+      fi
+
+      echo "Ansible playbook command completed successfully, verifying log completion..." >> "$LOG_FILE"
+
+      START_TIME=$(date +%s)
+      TIMEOUT=1800
+
+      while true; do
+        if [ -f "$ANSIBLE_LOG" ] && grep -q "PLAY RECAP" "$ANSIBLE_LOG"; then
+          echo "Ansible PLAY RECAP marker detected; installation complete." >> "$LOG_FILE"
+          break
+        fi
+
+        NOW=$(date +%s)
+        ELAPSED=$((NOW - START_TIME))
+
+        if [ $ELAPSED -ge $TIMEOUT ]; then
+          echo "WARNING: Timed out waiting for Ansible PLAY RECAP marker after ${ELAPSED} seconds." >> "$LOG_FILE"
+          break
+        fi
+
+        if [ $CHECK_PROCESS -eq 1 ] && ! pgrep -f "ansible-playbook" >/dev/null 2>&1; then
+          echo "Ansible process not detected while waiting for PLAY RECAP (elapsed ${ELAPSED}s)." >> "$LOG_FILE"
+        fi
+
+        sleep 5
+      done
+
+      echo "Ansible verification loop finished at $(date)" >> "$LOG_FILE"
+    path: /opt/vibestack/run-ansible-playbook.sh
+    permissions: '0755'
+    owner: root:root
+
 %{ if setup_custom_ssl ~}
   # SSL Certificate Files (base64 encoded for safe transmission)
   - content: "${ssl_cert_b64}"
     path: /opt/vibestack/ssl-cert.b64
     permissions: '0600'
     owner: root:root
 
   - content: "${ssl_key_b64}"
     path: /opt/vibestack/ssl-key.b64
     permissions: '0600'
     owner: root:root
 
 %{ if ssl_chain_b64 != "" ~}
   - content: "${ssl_chain_b64}"
     path: /opt/vibestack/ssl-chain.b64
     permissions: '0600'
     owner: root:root
 %{ endif ~}
 
   - content: |
       SSL_ENABLED=true
     path: /opt/vibestack/ssl-config.env
     permissions: '0644'
 %{ endif ~}
 
@@ -120,50 +211,51 @@ runcmd:
         # Clear any potential locks before retry
         timeout 60 bash -c 'while sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 2; done' || true
       fi
     done
 
   # Create ansible directory
   - mkdir -p /opt/vibestack
 
   # Download the latest playbook from GitHub (with retry)
   - timeout 60 wget -O /tmp/complete-setup.yml https://raw.githubusercontent.com/evolv3-ai/vibestack-coolify/main/coolify-complete-setup.yml || (sleep 10 && timeout 60 wget -O /tmp/complete-setup.yml https://raw.githubusercontent.com/evolv3-ai/vibestack-coolify/main/coolify-complete-setup.yml)
   - cp /tmp/complete-setup.yml /opt/vibestack/complete-setup.yml
 
   # Install pip and ansible with proper paths and retries
   - python3 -m pip install --upgrade pip || (sleep 5 && python3 -m pip install --upgrade pip)
   - sleep 5
   - pip3 install ansible docker || (sleep 5 && pip3 install ansible docker)
   - sleep 5
 
   # Install ansible collections (try both possible paths)
   - /home/ubuntu/.local/bin/ansible-galaxy collection install community.general --force || /usr/local/bin/ansible-galaxy collection install community.general --force || ansible-galaxy collection install community.general --force
   - /home/ubuntu/.local/bin/ansible-galaxy collection install community.docker --force || /usr/local/bin/ansible-galaxy collection install community.docker --force || ansible-galaxy collection install community.docker --force
   - /home/ubuntu/.local/bin/ansible-galaxy collection install ansible.posix --force || /usr/local/bin/ansible-galaxy collection install ansible.posix --force || ansible-galaxy collection install ansible.posix --force
 
   # Set proper permissions
   - chown -R ubuntu:ubuntu /opt/vibestack
+  - chown root:root /opt/vibestack/run-ansible-playbook.sh
 
 %{ if setup_custom_ssl ~}
   # FIXED SSL PROCESSING FOR CLOUDFLARE ORIGIN CERTIFICATES
   - |
     if [ -f /opt/vibestack/ssl-cert.b64 ] && [ -f /opt/vibestack/ssl-key.b64 ]; then
       echo "Processing Cloudflare Origin SSL certificates..." >> /var/log/vibestack-setup.log
       TMP_DIR="/opt/vibestack"
       CERT_B64="$TMP_DIR/ssl-cert.b64"
       KEY_B64="$TMP_DIR/ssl-key.b64"
       CHAIN_B64="$TMP_DIR/ssl-chain.b64"
       TARGET_DIR="/opt/vibestack/ssl-certs-staging"
       CERT_TMP="$TMP_DIR/ssl.cert"
       KEY_TMP="$TMP_DIR/ssl.key"
 
       mkdir -p "$TARGET_DIR"
 
       # Debug: Check if files exist and their sizes
       echo "DEBUG: Certificate file size: $(wc -c < "$CERT_B64" 2>/dev/null || echo "0")" >> /var/log/vibestack-setup.log
       echo "DEBUG: Key file size: $(wc -c < "$KEY_B64" 2>/dev/null || echo "0")" >> /var/log/vibestack-setup.log
       echo "DEBUG: Certificate file first 50 chars: $(head -c 50 "$CERT_B64" 2>/dev/null || echo "empty")" >> /var/log/vibestack-setup.log
       echo "DEBUG: Key file first 50 chars: $(head -c 50 "$KEY_B64" 2>/dev/null || echo "empty")" >> /var/log/vibestack-setup.log
 
       if base64 -d "$CERT_B64" > "$CERT_TMP" 2>>/var/log/vibestack-setup.log; then
         echo "Certificate decoded successfully (size: $(wc -c < "$CERT_TMP"))" >> /var/log/vibestack-setup.log
       else
@@ -269,107 +361,61 @@ runcmd:
         echo "SSL_STAGING_KEY_PATH=$KEY_DEST"
         if [ -n "$CHAIN_DEST" ]; then
           echo "SSL_FULLCHAIN_PATH=$CHAIN_DEST"
           echo "SSL_STAGING_FULLCHAIN_PATH=$CHAIN_DEST"
         fi
       } > /opt/vibestack/ssl-config.env
       chmod 644 /opt/vibestack/ssl-config.env
 
       rm -f "$CERT_B64" "$KEY_B64" "$CHAIN_B64"
 
       echo "SSL certificate processing complete" >> /var/log/vibestack-setup.log
     else
       echo "SSL certificate files not found, skipping SSL setup" >> /var/log/vibestack-setup.log
     fi
 %{ endif ~}
 
 %{ if skip_ansible_execution ~}
   # ANSIBLE TESTING MODE - Skipping automatic execution
   - |
     echo "=============================================" >> /var/log/vibestack-setup.log
     echo "ANSIBLE TESTING MODE ENABLED" >> /var/log/vibestack-setup.log
     echo "=============================================" >> /var/log/vibestack-setup.log
     echo "Ansible has been installed but the playbook will NOT be executed automatically." >> /var/log/vibestack-setup.log
     echo "" >> /var/log/vibestack-setup.log
     echo "To run the Ansible playbook manually, SSH into the instance and run:" >> /var/log/vibestack-setup.log
-    echo "  cd /opt/vibestack" >> /var/log/vibestack-setup.log
-    echo "  ansible-playbook complete-setup.yml" >> /var/log/vibestack-setup.log
-    echo "" >> /var/log/vibestack-setup.log
-    echo "The playbook is located at: /opt/vibestack/complete-setup.yml" >> /var/log/vibestack-setup.log
+      echo "  cd /opt/vibestack" >> /var/log/vibestack-setup.log
+      echo "  sudo ./run-ansible-playbook.sh complete-setup.yml" >> /var/log/vibestack-setup.log
+      echo "" >> /var/log/vibestack-setup.log
+      echo "The playbook is located at: /opt/vibestack/complete-setup.yml" >> /var/log/vibestack-setup.log
     echo "=============================================" >> /var/log/vibestack-setup.log
 
   # Create a helper script for manual execution
   - |
     cat > /opt/vibestack/run-setup.sh << 'EOF'
     #!/bin/bash
-    # Helper script to run the Ansible setup manually
-
-    cd /opt/vibestack
-
-    echo "Starting Ansible playbook execution..."
-    export ANSIBLE_LOG_PATH=/var/log/ansible-setup.log
-    export ANSIBLE_VERBOSITY=2
+    # Helper script to run the Ansible setup manually with automatic privilege escalation
 
-    # Find ansible-playbook command
-    if command -v ansible-playbook >/dev/null 2>&1; then
-      ANSIBLE_CMD="ansible-playbook"
-    elif [ -x /home/ubuntu/.local/bin/ansible-playbook ]; then
-      ANSIBLE_CMD="/home/ubuntu/.local/bin/ansible-playbook"
-    elif [ -x /usr/local/bin/ansible-playbook ]; then
-      ANSIBLE_CMD="/usr/local/bin/ansible-playbook"
-    else
-      echo "ERROR: ansible-playbook not found!"
-      exit 1
+    if [ "$EUID" -ne 0 ]; then
+      exec sudo "$0" "$@"
     fi
 
-    echo "Using ansible command: $ANSIBLE_CMD"
-
-    if $ANSIBLE_CMD complete-setup.yml; then
-      echo "Ansible playbook completed successfully"
-    else
-      echo "Ansible playbook failed with exit code $?"
-      echo "Check /var/log/ansible-setup.log for details"
-    fi
+    exec /opt/vibestack/run-ansible-playbook.sh complete-setup.yml "$@"
     EOF
     chmod +x /opt/vibestack/run-setup.sh
     chown ubuntu:ubuntu /opt/vibestack/run-setup.sh
 
 %{ else ~}
   # Final check: ensure no package management processes are running before Ansible
   - |
     echo "Final package management check before Ansible..." >> /var/log/vibestack-setup.log
     timeout 120 bash -c 'while sudo lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do echo "Waiting for final dpkg lock clear..." >> /var/log/vibestack-setup.log; sleep 3; done'
     echo "All package locks cleared, starting Ansible..." >> /var/log/vibestack-setup.log
 
-  # Run the automation playbook with better error handling and verbose logging
-  - |
-    cd /opt/vibestack
-    export ANSIBLE_LOG_PATH=/var/log/ansible-setup.log
-    export ANSIBLE_VERBOSITY=2
-
-    # Try multiple ansible paths
-    if command -v ansible-playbook >/dev/null 2>&1; then
-      ANSIBLE_CMD="ansible-playbook"
-    elif [ -x /home/ubuntu/.local/bin/ansible-playbook ]; then
-      ANSIBLE_CMD="/home/ubuntu/.local/bin/ansible-playbook"
-    elif [ -x /usr/local/bin/ansible-playbook ]; then
-      ANSIBLE_CMD="/usr/local/bin/ansible-playbook"
-    else
-      echo "ERROR: ansible-playbook not found!" >> /var/log/vibestack-setup.log
-      exit 1
-    fi
-
-    echo "Using ansible command: $ANSIBLE_CMD" >> /var/log/vibestack-setup.log
-
-    if $ANSIBLE_CMD complete-setup.yml; then
-      echo "Ansible playbook completed successfully" >> /var/log/vibestack-setup.log
-    else
-      echo "Ansible playbook failed with exit code $?" >> /var/log/vibestack-setup.log
-      echo "Check /var/log/ansible-setup.log for details" >> /var/log/vibestack-setup.log
-      # Continue anyway - partial setup might be recoverable
-    fi
+    # Run the automation playbook and wait for completion
+    - /opt/vibestack/run-ansible-playbook.sh complete-setup.yml
 %{ endif ~}
 
   # Log completion
   - echo "VibeStack Coolify setup completed at $(date)" >> /var/log/vibestack-setup.log
 
 final_message: "VibeStack Coolify setup completed. Check /var/log/vibestack-setup.log for details."
 
EOF
)